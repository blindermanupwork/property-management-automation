name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort mypy

    - name: Install package in development mode
      run: pip install -e .

    - name: Run setup test
      run: python test_setup.py

    - name: Test universal runner
      run: python src/run_anywhere.py --test

    - name: Run code formatting checks
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/

    - name: Run type checking
      run: mypy src/ --ignore-missing-imports

    - name: Run pytest with coverage
      run: |
        pytest tests/ -v --cov=automation --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-portability:
    name: Test Portability
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Test from different directories
      run: |
        # Test from root
        python test_setup.py
        
        # Test from subdirectory
        cd src
        python ../test_setup.py
        
        # Test universal runner from different location
        cd /tmp
        python $GITHUB_WORKSPACE/src/run_anywhere.py --info
        
    - name: Test installation scenarios
      run: |
        # Test clean installation
        pip install .
        run-automation --list
        
        # Test development installation
        pip uninstall -y automation
        pip install -e .
        run-automation --test

  test-dependencies:
    name: Test Dependency Management
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Test minimal dependencies
      run: |
        # Test with only core dependencies
        pip install pathlib
        python -c "from automation.config import Config; print('Core imports work')"
        
    - name: Test auto-install feature
      run: |
        # Test automatic dependency installation
        python src/run_anywhere.py --auto-install
        python test_setup.py

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, test-portability, test-dependencies]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run safety check
      run: safety check
    
    - name: Run bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
        pip install -e .
    
    - name: Validate README
      run: |
        python -m pip install readme_renderer
        python -m readme_renderer README.md > /dev/null
    
    - name: Check documentation links
      run: |
        # Simple link checker for markdown files
        find docs/ -name "*.md" -exec grep -l "http" {} \; || true

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, test-portability, test-dependencies, build, security-scan, docs]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      run: echo "✅ All tests passed! Package is ready for deployment."
    
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: echo "❌ Tests failed. Please check the logs above."