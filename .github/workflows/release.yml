name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run full test suite
      run: |
        python test_setup.py
        python src/run_anywhere.py --test
        pytest tests/ -v

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload to PyPI (if configured)
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        # Uncomment when ready to publish to PyPI
        # twine upload dist/*
        echo "Package built successfully. Manual PyPI upload required."
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: dist/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-packages
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "## Changes in this release:" > CHANGELOG.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Universal Runner (No Installation)" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo "python src/run_anywhere.py" >> CHANGELOG.md
        echo '```' >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Package Installation" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo "pip install automation-system" >> CHANGELOG.md
        echo '```' >> CHANGELOG.md
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: automation-system-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
        pip install -e .
    
    - name: Build documentation
      run: |
        # If using Sphinx, build docs
        # sphinx-build -b html docs/ docs/_build/
        
        # For now, just prepare README and docs for GitHub Pages
        mkdir -p docs/_build
        cp README.md docs/_build/index.md
        cp docs/*.md docs/_build/
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [test, build, create-release]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.create-release.result == 'success' }}
      run: |
        echo "‚úÖ Release ${{ github.ref_name }} created successfully!"
        echo "üì¶ Package built and uploaded"
        echo "üìÑ Documentation updated"
        echo "üéâ Ready for deployment"
    
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "‚ùå Release failed for ${{ github.ref_name }}"
        echo "Please check the logs and fix issues before retrying"